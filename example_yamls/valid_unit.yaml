apiVersion: v1
kind: Namespace
metadata:
  name: demo-qa
  labels:
    project: demo
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hello-world
  namespace: demo-qa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: hello-world
  namespace: demo-qa
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: hello-world-role-binding
  namespace: demo-qa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: hello-world
subjects:
- kind: ServiceAccount
  name: hello-world
---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all-ingress
  namespace: demo-qa
spec:
  ingress: []
  podSelector: {}
---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: hello-world-web
  namespace: demo-qa
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    ports:
    - port: 443
      protocol: TCP
  podSelector:
    matchLabels:
      app: hello-world-web
---





apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-world-web
  namespace: demo-qa
  labels:
    project: demo
spec:
  replicas:  1
  selector:
    matchLabels:
      project: demo
      app: hello-world-web
  template:
    metadata:
      labels:
        app: hello-world-web
        project: demo
    spec:
      serviceAccountName: hello-world
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      containers:
      - name: hello-world-web
        image: amitsaha/webapp-demo:golang-tls
        imagePullPolicy: Always
        args:
        - bash
        - -c
        - "/app.sh"
        env:
          - name: LISTEN_ADDRESS
            value: :8443
          
          
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
        resources:
          requests:
            memory: "1Gi"
            cpu: "0.5"
          limits:
            memory: "4Gi"
            cpu: "0.8"
        
        livenessProbe:
          httpGet:
            scheme: HTTPS
            path: /
            port: 8443
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            scheme: HTTPS
            path: /
            port: 8443
          initialDelaySeconds: 30
          periodSeconds: 10
        
        volumeMounts:
        
        
      volumes:
      
      
      nodeSelector:
        nodegroup: demo
        environment: qa
---

apiVersion: v1
kind: Service
metadata:
  name: hello-world
  namespace: demo-qa
spec:
  ports:
  - protocol: TCP
    port: 8443
    targetPort: 443
  selector:
    project: demo
    app: hello-world-web
---


